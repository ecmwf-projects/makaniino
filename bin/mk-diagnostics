#!/usr/bin/env python
#
# (C) Copyright 2000- NOAA.
#
# (C) Copyright 2000- ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation
# nor does it submit to any jurisdiction.

"""
Development tool: Shows/Plots model layers info.
"""

import argparse
import os
import sys

from makaniino.configuration import Configuration
from makaniino.utils.plot_utils import plot_feature_maps, plot_filters, plot_sample


def print_layer_names(model):
    """
    Print list of layer names and weight shapes
    """
    
    print(f"=========== model conv layers ============")
    for layer in model.model.layers:
        
        if "conv" in layer.name:
            weights, biases = layer.get_weights()
            print(f"layer: {layer.name:12s} filters-weights: {weights.shape}")
   

if __name__ == "__main__":
    
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
    
    parser.add_argument('-n', '--name',
                        required=True,
                        help="Name of model without suffix")
    
    parser.add_argument('-c', '--config_path',
                        default=os.path.join(os.getcwd(), "logs"),
                        help="Path where the model config JSON is saved")
    
    parser.add_argument('-w', '--weights',
                        help="Path of the weights file")
    
    parser.add_argument('-out', '--out_path',
                        default=os.path.join(os.getcwd(), "feature_maps"),
                        help="Path where the output figure is saved")
    
    parser.add_argument('-i', '--info',
                        action="store_true",
                        help="Show information of the model")

    parser.add_argument('-l', '--layer',
                        help="Name of layer whose feature maps are plotted")

    # print the help if no arguments are passed
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()
    
    # info and layer must not be set simultaneously
    if args.info and args.layer:
        raise ValueError("Choose what to do: either --info or --layer")
    
    # Resurrect the configuration from config JSON file
    conf = Configuration.from_file(os.path.join(args.config_path, args.name + ".config"))
    print(conf.to_string())
    
    # Resurrect model and data-handler
    model = conf.get_configurable("model")
    data_handler = conf.get_configurable("data_handler")
    
    # re-build the model
    model.build()
    
    # load weights from file
    model.load_weights_from_file(args.weights)
    model.summary()
    
    # make sure that the output dir exists
    if not os.path.isdir(args.out_path):
        os.mkdir(args.out_path)
        
    # feature maps use the first test data
    test_gen = data_handler.generator_test
    (x_data, y_data) = next(iter(test_gen))
    
    # if info, show the layers..
    if args.info:
        print_layer_names(model)
    else:
        
        # plot the first sample of the batch
        plot_sample(x_data[0, :, :, :],
                    y_data[0, :, :, 0],
                    output_dir=args.out_path,
                    title="sample")
        
        plot_filters(model,
                     args.layer,
                     args.name,
                     args.out_path)
        
        plot_feature_maps(model,
                          args.layer,
                          args.name,
                          args.out_path,
                          x_data)
        
    print("All done.")
